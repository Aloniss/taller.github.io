# Introducción a Python y Librerías esenciales

*Python* es un lenguaje de programación libre, abierto y gratuito, que puede ser descargado por cualquiera para ser usado. Este se ha convertido en uno de los lenguajes más populares y demandados en el mercado del trabajo (i.e. *ArcPy*, *PyQGIS* para desarrollar plugins y herramientas en el entorno de los *SIG*).

![](foo/web/01-01_2-logoPy.png){width=40% fig-align="center"}

::: {.callout-note}
Según *Stack Overflow* (uno de los foros de programadores más grande de internet) *Python* es el tercer lenguaje más popular.
:::

Existen distintas formas de escribir código y usar *Python* (un terminal o CLI, *IPython*, *Jupyter*, etc.), sin embargo, para aprovechar su potencial y desplegar la naturaleza visual de los datos geográficos, ocuparemos *Spyder*, un IDE diseñado específicamente para *Python*.

En el contexto de los datos geográficos, *Python* por sí solo puede que no nos baste, sin embargo, es posible instalar ciertos paquetes o librerías especializadas que permiten realizar acciones concretas o análisis más particulares de este tipo de datos. En concreto, estos son módulos o paquetes específicos que expanden la funcionalidad de *Python*, facilitando la gestión de los datos que poseen un componente espacial.

## Programas necesarios

Para poder organizar nuestro entorno de trabajo, deberemos descargar algunos programas que ayudarán a generar ambientes de trabajo reproducibles y aislados entre sí.

### Git Bash {-}

Bash es un intérprete de línea de comandos y un lenguaje de *scripting* muy popular en sistemas operativos Unix y basados en Unix, como Linux y macOS. A través de esta se puede controlar el computador digitando los comandos desde el teclado, en lugar de usar los botones y menús como habitualmente se hace con los sistemas operativos más usados. 

De forma nativa, este intérprete no se encuentra dentro de *Windows*, por lo que, para hacer uso de este deberemos descargar Git Bash, el cual integra esta herramiento junto con *git*, "un sistema de control de versiones distribuido, libre y de código abierto, diseñado para manejar proyectos de cualquier tamaño, desde pequeños hasta muy grandes, con rapidez y eficiencia".

::: {.callout-note}
Si bien, *Git* no suena tan familiar, su versión online *GitHub* si. Esta página alberga código y sus versiones en internet y cualquier persona puede ser capaz de ver, replicar y alterar dicho (con los permisos suficientes). Algunas de las empresas que ocupan esto son Google, Microsoft y Netflix.
:::

Para su instalación, nos dirigiremos a la página oficial de *Git Bash*:

-   <https://git-scm.com/downloads>

Seleccionamos el sistema operativo y versión (64-bit y 32-bit) que corresponda al computador. Ejecutamos el instalador, al terminar se verá similar a la imagen a continuación, los colores pueden cambiar, ya que ofrece la posibilidad de personalizar.

![*Git Bash* abierto en el escritorio, muestra el usuario (Alene), el computador (LAPTOP-RLJ48LRB) y la ruta en la barra principal (`/c/Users/Alene`).](foo/03-01-bashAbierto.png){#fig-bashAbierto}

### Miniconda {-}

Para la creación de entornos de trabajo podemos ocupar *Conda*, un sistema de gestión de paquetes y entornos de desarrollo, facilitando la instalación y gestión de librerías con sus dependencias, siendo importantes para evitar incompatibilidades entre paquetes. Debido a que *Anaconda* resulta tener un gran volumen, ocuparemos *Miniconda*, la cual es una distribución de *Python* que posee lo esencial para funcionar. Dentro de este instalaremos los paquetes y librerías que necesitamos para realizar los análisis geoespaciales.

El instalador se encuentra disponible en:

-   <https://docs.conda.io/en/latest/miniconda.html>

::: {.callout-important}
Es **IMPORTANTE** seleccionar el sistema operativo y versión (64-bit y 32-bit) que corresponda al computador y durante la instalación seleccione la primera opción para "Agregar Miniconda3 a mi variable de entorno PATH" seleccionando también en "Registrar Anaconda como Python 3.x predeterminado".
:::

Aunque el paso de agregar *Anaconda* al *PATH* no es recomendado por el sistema, lo haremos igualmente para que sea más fácil usar *Conda* con *Git Bash*.

#### Probando la nueva configuración {-}

1.  Cerramos y abrimos el *Bash*.

2.  En el Terminal que se levanta digite `bash` y presione *Enter*. Si no se obtiene ningún mensaje, quiere decir que *Bash* está disponible para ser utilizado.

3.  Digite `git` y presione *Enter*. Si aprecia una serie de comandos, *Git* está disponible para ser utilizado.

![*Git Bash* testeado con `bash` (sin mensaje) y `git` (comandos disponibles).](foo/03-02-bashTest.png){#fig-bashTest}

4.  Digite `conda` y presiona *Enter*, si se aprecia una serie de comandos, *Conda* está disponible para ser empleado.

![*Conda* testeado en *Git Bash*.](foo/03-03-bashTest2.png){#fig-bashTest2}

### El ambiente {-}

Dentro *Conda* instalaremos un ambiente de *Python* con librerías específicas para el análisis de datos geoespaciales que sido creado exclusivamente para este taller. Puedes descargar el archivo del ambiente haciendo clic [aquí](recursos/tallerpython.yml){download="tallerpython.yml"}. 

::: {.callout-warning}
Todavía hay que ver esto. EL NOMBRE NO ES TALLERPYTHON, SINO QUE SPYDER-PYTHON una cosa asi, insertar al final
:::

Este archivo (de extensión `.yml`) contiene todos los paquetes con sus dependencias necesarios para desarrollar las actividades posteriores. Dentro de él se encuentra el nombre del ambiente (en este caso tallerpython), las librerías y los canales desde donde se obtienen.

::: {.callout-note}
Note que aquí estamos creando un ambiente con paquetes previamente definidos. Si desea crear otro ambiente, con otras librerías, puede consultar la guía de [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html).
:::

Para instalar este ambiente ejecute desde el Terminal el comando `conda env create -f tallerpython.yml`.

::: {.callout-important}
Tenga en cuenta que el proceso toma tiempo y varía de acuerdo con las capacidades de cada computador.
:::

![Instalación del entorno con el archivo `environment.yml`.](foo/03-07-mkenvir.png){#fig-mkenvir}

Para ver la lista de los entornos de trabajo disponibles, ejecute `conda info --envs`. En este caso, nos interesa el ambiente `tallerpython`.

![Ambientes instalados. Se pueden observar varios ya instalados.](foo/web/01-01-ambienteSeleccion.png){#fig-ambiente}

Para activar cualquier entorno de trabajo debe ejecutar `conda activate <nombre-entorno>`. 

En el caso de que *Git Bash* genere problemas al usar `conda activate` ejecute `conda init bash` solo una vez. Posteriormente, reinicie *Git Bash* para que los cambios surtan efecto. Si el problema persiste, puede intentar revisando el siguiente [link](https://discuss.codecademy.com/t/setting-up-conda-in-git-bash/534473).

Para desactivar el entorno de trabajo `conda deactivate`, como se observa a continuación, pasamos del ambiente `base` al recién instalado y luego a `base` nuevamente.

![Activación y desactivación de los entornos.](foo/web/01-02-acti-deac.png){#fig-activate}

### *Spyder* {-}

*Spyder* es un entorno de desarrollo integrado (IDE) de código abierto diseñado específicamente para la programación en *Python*. Combina herramientas avanzadas en un solo lugar, lo que lo hace popular entre investigadores y analistas.

*Spyder* ya viene en el entorno de trabajo. Para usarlo solo hay que escribir `spyder` estando en el entorno `tallerpython`.

Dentro de este, deberemos escoger el sistema operativo del computador.

#### Partes de *Spyder* {-}

Spyder cuenta principalmente con 3 paneles, los cuales pueden tener distintas funcionalidades. Entre sus partes principales se encuentran:

1.  Editor

En este panel se encuentra el script de *Python* a ejecutar. Dentro de este, se nos mostrará advertencias (*warnings*) o errores dentro de nuestro código. Por defecto, las líneas se encuentran numeradas. También se pueden agregar pequeñas anotaciones para destacar ciertas líneas de código (pequeños puntos rojos en líneas 25 y 29).

![Editor de *Spyder*](foo/web/01-03-editor.png){#fig-editor}

2. Consola

   Aquí es donde se ejecuta el código. Una manera de hacerlo es dentro del Editor y apretando `F5` o `Ctrl + Enter`. En el caso de querer ejecutar código en solo una línea o líneas seleccionadas, puede apretar `F9`. También puede ejecutar código directamente en la consola.

   ![Consola de *Spyder*](foo/web/01-04-consola.png){#fig-consola}

   2.1. Historial

   Se muestra el historial del código ejecutado. También aparece código de sesiones anteriores.

   ![Historial de *Spyder*](foo/web/01-05-historial.png){#fig-historial}

3. Conjunto de Sub-Paneles

   Este panel contiene distintas herramientas que aportarán interacción al análisis de los datos geográficos.

   3.1. Explorador de variables

   Se muestran los objetos creados con la posibilidad de interactuar con estos.

   ![Explorador de variables en *Spyder*](foo/web/01-06-variables.png){#fig-variables}

   3.2. Gráficos

   Muestra todos los gráficos ejecutados en la sesión.

   ![Gráficos dentro de *Spyder*](foo/web/01-07-graficos.png){#fig-graficos}

   3.3. Ayuda

   A través de `Ctrl + I`, *Spyder* es capaz de mostrar la documentación de la función en la que se está.

   ![Ayuda dentro de *Spyder*](foo/web/01-08-ayuda.png){#fig-ayuda}

   3.4. Perfilador

   El perfilador determina el tiempo de ejecución y el número de llamadas para cada función y método llamado en un archivo. Esto te permite identificar fácilmente los cuellos de botella en tu código, señala declaraciones exactas más críticas para la optimización y mide la diferencia de rendimiento después de los cambios de seguimiento.


![Perfilador (*Profiler*) dentro de *Spyder*](foo/web/01-09-profiler.png){#fig-profiler}

## Recordatorio {-}

Vamos a realizar un repaso para ver que todo está en orden. Para esto se ejecutará un *script* dentro de *Spyder*. A continuación, explicaremos un ejemplo de carga y visualización de datos. Este tendrá los siguientes pasos:
 
-   Carga de librerías.

-   Cambio en el directorio de trabajo.

-   Carga de datos.

-   Visualización de datos.

### Librerías {-}

Las librerías o paquetes son una forma de organizar múltiples funciones relacionadas. Estan se componen de módulos, los cuales son archivos individuales que contienen código reutilizable. Acceder a esta (y para ocupar *Python* en general) se ocupa la notación de punto (*Dot notation*). Aquí, el nombre del objeto va seguido de un punto (`.`), y luego el nombre del atributo o método al que se quiera acceder o invocar.

### Directorios de trabajo {-}

Al escribir un *script* de *Python* es importante saber en que ruta estás dentro del computador. Esto con el fin de poder acceder correctamente a datos que se necesiten ocupar, exportar resultados, entre otros. En *Python*, puedes utilizar el módulo `os` para gestionar rutas, ya que evita errores relacionados con rutas relativas o absolutas.

### Carga de datos {-}

En nuestro contexto de análisis geoespacial, las principales herramientas que nos ayudarán a cargar datos son Pandas, GeoPandas y Rasterio, ya que sirven para datos tabulares, vectoriales y raster, respectivamente.

### Visualización de datos {-}

La principal herramienta para visualizar datos dentro de *Python* es *Matplotlib*, el cual a través de su módulo `pyplot`, permite generar desde simples a complejas figuras. En el caso particular de los datos raster, el paquete `earthpy` otorga las herramientas necesarias para generar representaciones adecuadas para este tipo de datos.

### Ejemplo {-}

Una vez explicado los pasos a seguir, se tiene que implementar en código. Este tendrá la siguiente forma:

```{python}
#| eval: false
import os # <1>
import geopandas as gpd # <1>
import matplotlib.pyplot as plt # <1>

os.chdir("D:/Descargas") # <2>

poligono = gpd.read_file("polygon.shp") # <3>

fig, ax = plt.subplots() # <4>

poligono.plot(ax = ax, # <4>
              color = "red") # <4>

ax.set_title("Polígono a visualizar") # <4>

plt.show() # <4>
```

1. Importa las librerías necesarias. Tanto `geopandas` como  `matplotlib.pyplot` están abreviados gracias a `as`. La abreviación existe para facilitar la escritura dentro del *script*.
2. Cambia el directorio de trabajo a la ruta `D:/Descargas`. Esta ruta es personal y varía según dispositivo.
3. Con *GeoPandas* (`gpd`) carga un archivo vectorial (`.shp`).
4. A través de *Matplotlib* (`plt`), graficamos el objeto `poligono`. Si desea más información de como visualizar datos, consulte su [documentación](https://matplotlib.org/stable/users/explain/quick_start.html).

Si todo va bien, el resultado del script sería la figura mostrada abajo:
```{python}
#| eval: true
#| echo: false
#| fig-align: center
import os 
import geopandas as gpd 
import matplotlib.pyplot as plt 

poligono = gpd.read_file("recursos/polygon.shp") 

fig, ax = plt.subplots() 

poligono.plot(ax = ax, 
              color = "red") 

ax.set_title("Polígono a visualizar") 

plt.show() 
```

## Ejercicios

1. Descargue y lea los datos vectoriales disponibles en este [enlace](https://figshare.com/ndownloader/files/49550784). Estos datos corresponden a una base de datos histórica de cicatrices de fuego en Chile (propiedad del (CR)^2^ y disponibles en el siguiente [link](https://www.plataformadedatos.cl/datasets/es/492F65B350AAF9D1)). Una vez descargado, intente graficarlos.

::: {.callout-tip collapse="true"}
El paquete `earthpy` tiene un submódulo especializado para descargar datos desde internet. Este es `data.get_data()`. 
:::

2. Una vez cargados los datos, a través de sus atributos, consulte por la cantidad de puntos de ignición y superficie quemada por región.

3. Dadas las provincias de Chile continental (disponibles en el siguiente [enlace](https://figshare.com/ndownloader/files/50316978)), consulte la cantidad de puntos de ignición por región a través de la consulta basada en la coincidencia espacial. Observe si hay diferencias con lo obtenido con el ejercicio anterior.

::: {.callout-tip collapse="true"}
En el caso de que las capas estén en otro sistema de referencia, puede ocupar la función de *GeoPandas* `.to_crs()`.

*GeoPandas* permite disolver polígonos a través de `.dissolve()`. Si tiene dudas, puede consultar la documentación de ambas funciones.
:::







