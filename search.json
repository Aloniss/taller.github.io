[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python y librerías Geoespaciales para el análisis de datos en el contexto de los Incendios Forestales",
    "section": "",
    "text": "Descripción\n¡Bienvenid@os al taller teórico-práctico “Python y Librerías Geoespaciales para el análisis de datos en el contexto de los Incendios Forestales”!\nEste taller ha sido diseñado para proporcionarles las herramientas y conocimientos necesarios para abordar, de manera práctica y efectiva, el análisis de datos geoespaciales con el lenguaje de programación Python. A lo largo del taller, exploraremos un conjunto de librerías especializadas y software que nos permitirán realizar una serie de tareas que involucran el preprocesamiento, procesamientos y análisis sobre los datos espaciales con un enfoque particular en los Incendios Forestales.\nNuestro objetivo es capacitar a los participantes para manejar, procesar y visualizar datos geoespaciales que contribuyan al entendimiento y prevención de los Incendios Forestales, una problemática relevante y desafiante para el medio ambiente y las comunidades. Este taller forma parte del proyecto Fondecyt de Iniciación XXXX.\n¡Esperamos que este taller sea una experiencia enriquecedora, donde teoría y práctica se fusionen para potenciar sus habilidades y conocimientos en el ámbito del análisis geoespacial aplicado a desafíos ambientales contemporáneos!\nEste libro digital fue hecho usando Quarto. Puede revisar su documentación dentro del siguiente link.",
    "crumbs": [
      "Descripción"
    ]
  },
  {
    "objectID": "01-python-librerias.html",
    "href": "01-python-librerias.html",
    "title": "1  Introducción a Python y Librerías esenciales",
    "section": "",
    "text": "1.1 Programas necesarios\nPara poder organizar nuestro entorno de trabajo, deberemos descargar algunos programas que ayudarán a generar ambientes de trabajo reproducibles y aislados entre sí.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a Python y Librerías esenciales</span>"
    ]
  },
  {
    "objectID": "01-python-librerias.html#programas-necesarios",
    "href": "01-python-librerias.html#programas-necesarios",
    "title": "1  Introducción a Python y Librerías esenciales",
    "section": "",
    "text": "Git Bash\nBash es un intérprete de línea de comandos y un lenguaje de scripting muy popular en sistemas operativos Unix y basados en Unix, como Linux y macOS. A través de esta se puede controlar el computador digitando los comandos desde el teclado, en lugar de usar los botones y menús como habitualmente se hace con los sistemas operativos más usados.\nDe forma nativa, este intérprete no se encuentra dentro de Windows, por lo que, para hacer uso de este deberemos descargar Git Bash, el cual integra esta herramiento junto con git, “un sistema de control de versiones distribuido, libre y de código abierto, diseñado para manejar proyectos de cualquier tamaño, desde pequeños hasta muy grandes, con rapidez y eficiencia”.\n\n\n\n\n\n\nNota\n\n\n\nSi bien, Git no suena tan familiar, su versión online GitHub si. Esta página alberga código y sus versiones en internet y cualquier persona puede ser capaz de ver, replicar y alterar dicho (con los permisos suficientes). Algunas de las empresas que ocupan esto son Google, Microsoft y Netflix.\n\n\nPara su instalación, nos dirigiremos a la página oficial de Git Bash:\n\nhttps://git-scm.com/downloads\n\nSeleccionamos el sistema operativo y versión (64-bit y 32-bit) que corresponda al computador. Ejecutamos el instalador, al terminar se verá similar a la imagen a continuación, los colores pueden cambiar, ya que ofrece la posibilidad de personalizar.\n\n\n\n\n\n\nFigura 1.1: Git Bash abierto en el escritorio, muestra el usuario (Alene), el computador (LAPTOP-RLJ48LRB) y la ruta en la barra principal (/c/Users/Alene).\n\n\n\n\n\nMiniconda\nPara la creación de entornos de trabajo podemos ocupar Conda, un sistema de gestión de paquetes y entornos de desarrollo, facilitando la instalación y gestión de librerías con sus dependencias, siendo importantes para evitar incompatibilidades entre paquetes. Debido a que Anaconda resulta tener un gran volumen, ocuparemos Miniconda, la cual es una distribución de Python que posee lo esencial para funcionar. Dentro de este instalaremos los paquetes y librerías que necesitamos para realizar los análisis geoespaciales.\nEl instalador se encuentra disponible en:\n\nhttps://docs.conda.io/en/latest/miniconda.html\n\n\n\n\n\n\n\nImportante\n\n\n\nEs IMPORTANTE seleccionar el sistema operativo y versión (64-bit y 32-bit) que corresponda al computador y durante la instalación seleccione la primera opción para “Agregar Miniconda3 a mi variable de entorno PATH” seleccionando también en “Registrar Anaconda como Python 3.x predeterminado”.\n\n\nAunque el paso de agregar Anaconda al PATH no es recomendado por el sistema, lo haremos igualmente para que sea más fácil usar Conda con Git Bash.\n\nProbando la nueva configuración\n\nCerramos y abrimos el Bash.\nEn el Terminal que se levanta digite bash y presione Enter. Si no se obtiene ningún mensaje, quiere decir que Bash está disponible para ser utilizado.\nDigite git y presione Enter. Si aprecia una serie de comandos, Git está disponible para ser utilizado.\n\n\n\n\n\n\n\nFigura 1.2: Git Bash testeado con bash (sin mensaje) y git (comandos disponibles).\n\n\n\n\nDigite conda y presiona Enter, si se aprecia una serie de comandos, Conda está disponible para ser empleado.\n\n\n\n\n\n\n\nFigura 1.3: Conda testeado en Git Bash.\n\n\n\n\n\n\nEl ambiente\nDentro Conda instalaremos un ambiente de Python con librerías específicas para el análisis de datos geoespaciales que sido creado exclusivamente para este taller. Puedes descargar el archivo del ambiente haciendo clic aquí.\n\n\n\n\n\n\nAdvertencia\n\n\n\nTodavía hay que ver esto. EL NOMBRE NO ES TALLERPYTHON, SINO QUE SPYDER-PYTHON una cosa asi, insertar al final\n\n\nEste archivo (de extensión .yml) contiene todos los paquetes con sus dependencias necesarios para desarrollar las actividades posteriores. Dentro de él se encuentra el nombre del ambiente (en este caso tallerpython), las librerías y los canales desde donde se obtienen.\n\n\n\n\n\n\nNota\n\n\n\nNote que aquí estamos creando un ambiente con paquetes previamente definidos. Si desea crear otro ambiente, con otras librerías, puede consultar la guía de conda.\n\n\nPara instalar este ambiente ejecute desde el Terminal el comando conda env create -f tallerpython.yml.\n\n\n\n\n\n\nImportante\n\n\n\nTenga en cuenta que el proceso toma tiempo y varía de acuerdo con las capacidades de cada computador.\n\n\n\n\n\n\n\n\nFigura 1.4: Instalación del entorno con el archivo environment.yml.\n\n\n\nPara ver la lista de los entornos de trabajo disponibles, ejecute conda info --envs. En este caso, nos interesa el ambiente tallerpython.\n\n\n\n\n\n\nFigura 1.5: Ambientes instalados. Se pueden observar varios ya instalados.\n\n\n\nPara activar cualquier entorno de trabajo debe ejecutar conda activate &lt;nombre-entorno&gt;.\nEn el caso de que Git Bash genere problemas al usar conda activate ejecute conda init bash solo una vez. Posteriormente, reinicie Git Bash para que los cambios surtan efecto. Si el problema persiste, puede intentar revisando el siguiente link.\nPara desactivar el entorno de trabajo conda deactivate, como se observa a continuación, pasamos del ambiente base al recién instalado y luego a base nuevamente.\n\n\n\n\n\n\nFigura 1.6: Activación y desactivación de los entornos.\n\n\n\n\n\nSpyder\nSpyder es un entorno de desarrollo integrado (IDE) de código abierto diseñado específicamente para la programación en Python. Combina herramientas avanzadas en un solo lugar, lo que lo hace popular entre investigadores y analistas.\nSpyder ya viene en el entorno de trabajo. Para usarlo solo hay que escribir spyder estando en el entorno tallerpython.\nDentro de este, deberemos escoger el sistema operativo del computador.\n\nPartes de Spyder\nSpyder cuenta principalmente con 3 paneles, los cuales pueden tener distintas funcionalidades. Entre sus partes principales se encuentran:\n\nEditor\n\nEn este panel se encuentra el script de Python a ejecutar. Dentro de este, se nos mostrará advertencias (warnings) o errores dentro de nuestro código. Por defecto, las líneas se encuentran numeradas. También se pueden agregar pequeñas anotaciones para destacar ciertas líneas de código (pequeños puntos rojos en líneas 25 y 29).\n\n\n\n\n\n\nFigura 1.7: Editor de Spyder\n\n\n\n\nConsola\nAquí es donde se ejecuta el código. Una manera de hacerlo es dentro del Editor y apretando F5 o Ctrl + Enter. En el caso de querer ejecutar código en solo una línea o líneas seleccionadas, puede apretar F9. También puede ejecutar código directamente en la consola.\n\n\n\n\n\n\nFigura 1.8: Consola de Spyder\n\n\n\n2.1. Historial\nSe muestra el historial del código ejecutado. También aparece código de sesiones anteriores.\n\n\n\n\n\n\nFigura 1.9: Historial de Spyder\n\n\n\nConjunto de Sub-Paneles\nEste panel contiene distintas herramientas que aportarán interacción al análisis de los datos geográficos.\n3.1. Explorador de variables\nSe muestran los objetos creados con la posibilidad de interactuar con estos.\n\n\n\n\n\n\nFigura 1.10: Explorador de variables en Spyder\n\n\n\n3.2. Gráficos\nMuestra todos los gráficos ejecutados en la sesión.\n\n\n\n\n\n\nFigura 1.11: Gráficos dentro de Spyder\n\n\n\n3.3. Ayuda\nA través de Ctrl + I, Spyder es capaz de mostrar la documentación de la función en la que se está.\n\n\n\n\n\n\nFigura 1.12: Ayuda dentro de Spyder\n\n\n\n3.4. Perfilador\nEl perfilador determina el tiempo de ejecución y el número de llamadas para cada función y método llamado en un archivo. Esto te permite identificar fácilmente los cuellos de botella en tu código, señala declaraciones exactas más críticas para la optimización y mide la diferencia de rendimiento después de los cambios de seguimiento.\n\n\n\n\n\n\n\nFigura 1.13: Perfilador (Profiler) dentro de Spyder",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a Python y Librerías esenciales</span>"
    ]
  },
  {
    "objectID": "01-python-librerias.html#recordatorio",
    "href": "01-python-librerias.html#recordatorio",
    "title": "1  Introducción a Python y Librerías esenciales",
    "section": "Recordatorio",
    "text": "Recordatorio\nVamos a realizar un repaso para ver que todo está en orden. Para esto se ejecutará un script dentro de Spyder. A continuación, explicaremos un ejemplo de carga y visualización de datos. Este tendrá los siguientes pasos:\n\nCarga de librerías.\nCambio en el directorio de trabajo.\nCarga de datos.\nVisualización de datos.\n\n\nLibrerías\nLas librerías o paquetes son una forma de organizar múltiples funciones relacionadas. Estan se componen de módulos, los cuales son archivos individuales que contienen código reutilizable. Acceder a esta (y para ocupar Python en general) se ocupa la notación de punto (Dot notation). Aquí, el nombre del objeto va seguido de un punto (.), y luego el nombre del atributo o método al que se quiera acceder o invocar.\n\n\nDirectorios de trabajo\nAl escribir un script de Python es importante saber en que ruta estás dentro del computador. Esto con el fin de poder acceder correctamente a datos que se necesiten ocupar, exportar resultados, entre otros. En Python, puedes utilizar el módulo os para gestionar rutas, ya que evita errores relacionados con rutas relativas o absolutas.\n\n\nCarga de datos\nEn nuestro contexto de análisis geoespacial, las principales herramientas que nos ayudarán a cargar datos son Pandas, GeoPandas y Rasterio, ya que sirven para datos tabulares, vectoriales y raster, respectivamente.\n\n\nVisualización de datos\nLa principal herramienta para visualizar datos dentro de Python es Matplotlib, el cual a través de su módulo pyplot, permite generar desde simples a complejas figuras. En el caso particular de los datos raster, el paquete earthpy otorga las herramientas necesarias para generar representaciones adecuadas para este tipo de datos.\n\n\nEjemplo\nUna vez explicado los pasos a seguir, se tiene que implementar en código. Este tendrá la siguiente forma:\n\n1import os\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n2os.chdir(\"D:/Descargas\")\n\n3poligono = gpd.read_file(\"polygon.shp\")\n\n4fig, ax = plt.subplots()\n\npoligono.plot(ax = ax,\n              color = \"red\")\n\nax.set_title(\"Polígono a visualizar\")\n\nplt.show()\n\n\n1\n\nImporta las librerías necesarias. Tanto geopandas como matplotlib.pyplot están abreviados gracias a as. La abreviación existe para facilitar la escritura dentro del script.\n\n2\n\nCambia el directorio de trabajo a la ruta D:/Descargas. Esta ruta es personal y varía según dispositivo.\n\n3\n\nCon GeoPandas (gpd) carga un archivo vectorial (.shp).\n\n4\n\nA través de Matplotlib (plt), graficamos el objeto poligono. Si desea más información de como visualizar datos, consulte su documentación.\n\n\n\n\nSi todo va bien, el resultado del script sería la figura mostrada abajo:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a Python y Librerías esenciales</span>"
    ]
  },
  {
    "objectID": "01-python-librerias.html#ejercicios",
    "href": "01-python-librerias.html#ejercicios",
    "title": "1  Introducción a Python y Librerías esenciales",
    "section": "1.2 Ejercicios",
    "text": "1.2 Ejercicios\n\nDescargue y cargue los datos vectoriales disponibles en este enlace. Una vez descargado, intente graficarlos.\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nEl paquete earthpy tiene un submódulo especializado para descargar datos desde internet. Este es data.get_data().\n\n\n\n\nUna vez cargados los datos, a través de sus atributos, consulte por la cantidad de puntos de ignición y superficie quemada por región.\nDadas las provincias de Chile continental (disponibles en el siguiente enlace), consulte la cantidad de puntos de ignición por región a través del componente espacial entre capas. Observe si hay diferencias con lo obtenido con el ejercicio anterior.\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nEn el caso de que las capas estén en otro sistema de referencia, puede ocupar la función de GeoPandas .to_crs().\nGeoPandas permite disolver polígonos a través de .dissolve(). Si tiene dudas, puede consultar la documentación de ambas funciones.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a Python y Librerías esenciales</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html",
    "href": "02-geomatica.html",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "",
    "text": "2.1 Datos vectoriales\nLos datos vectoriales están compuestos de posiciones geométricas discretas (valores x,y), conocidos como vértices, que definen la forma del objeto espacial. La organización de los vértices determina el tipo de vector con el que se está trabajando, existiendo tres tipos de datos, los puntos, las líneas y los polígonos. Entre los formatos más utilizados se encuentra el shapefile (.shp) o el GeoJSON (.geojson).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#datos-raster",
    "href": "02-geomatica.html#datos-raster",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "2.2 Datos Raster",
    "text": "2.2 Datos Raster\nLos rásters o cuadrículas son datos almacenados en una matriz de valores, representados como píxeles. Cada valor de píxel representa un área específica de la superficie terrestre, formando así el dato espacial. Un archivo ráster está compuesto por una cuadrícula regular de celdas de igual tamaño. Probablemente ya hemos utilizado datos ráster, como en fotografías digitales o imágenes de Google Earth. Sin embargo, los rásters que vamos a trabajar son distintos de las fotografías comunes, ya que están espacialmente referenciados. Esto significa que cada píxel representa una porción concreta de la superficie terrestre, lo cual se conoce como resolución espacial.\nLos datos ráster pueden tener una o varias capas (también llamadas layers o variables). Por ejemplo, un modelo de elevación generalmente incluye solo una capa que representa la altitud de la superficie terrestre en un área determinada. Sin embargo, otros tipos de datos, como imágenes multiespectrales o series temporales, pueden producir un ráster compuesto por varias capas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#sistemas-de-referencia",
    "href": "02-geomatica.html#sistemas-de-referencia",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "2.3 Sistemas de referencia",
    "text": "2.3 Sistemas de referencia\nEs muy común que se obtengan datos espaciales desde distintas fuentes y que esos datos cubran diferentes extensiones espaciales. Este tipo de datos espaciales se encuentran a menudo en diferentes Sistemas de Referencia de Coordenadas (CRS, por sus siglas en inglés). En el caso de que se quiera trabajar con datos en distints CRS deberemos reproyectarlos. Sin embargo, es importante mencionar que cuando reproyectamos los datos, los estamos modificando. De esta forma estamos introduciendo alguna incerteza en nuestros datos. Mientras que esta incerteza es ligeramente menos importante en los datos vectoriales que en los raster, es necesario considerarla. Por otra parte, si solo se reproyecta para crear un mapa base, no es importante.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#formación-del-color",
    "href": "02-geomatica.html#formación-del-color",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "2.4 Formación del color",
    "text": "2.4 Formación del color\nLa teoría aditiva del color explica cómo se forma el color mediante la combinación de luces de diferentes colores, especialmente los colores primarios de la luz: rojo, verde y azul (RGB). Cuando estos colores de luz se mezclan en diversas intensidades, generan una gama completa de colores.\n\n\n\n\n\n\nFigura 2.1: Composición RGB\n\n\n\nEn un monitor de computadora, cada píxel está compuesto por subpíxeles rojo, verde y azul. Al ajustar la intensidad de cada subpíxel, el monitor produce diferentes colores visibles.\nEn las imágenes de satélite, esta teoría se aplica para representar las bandas espectrales. Cada banda (p. ej., visible, infrarrojo) se asigna a un canal de color (R, G, B) para crear una composición de color que permite observar características específicas de la superficie terrestre.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#tipos-de-imagenes",
    "href": "02-geomatica.html#tipos-de-imagenes",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "2.5 Tipos de imagenes",
    "text": "2.5 Tipos de imagenes\nAnteriormente ya mencionamos que existen diferentes tipos de imágenes, desde aquellas que almacenan solo una variable, hasta las que contienen varias o cientos.\n\nMonobanda\nSon aquellas que solo almacenan una variable o layer. Es común encontrar este tipo de imágenes para almacenar y representar datos de tipo continuo, como la temperatura superficial o la reflectancia. No obstante, se usan también para representar variables de tipo discretas como las categorías de un sistema de clasificación.\n\n\n\n\n\n\n\n\n\n\n\nMultiespectral\nLas imágenes multiespectrales son raster que poseen datos en varias bandas del espectro electromagnético. Cada banda representa una parte diferente del espectro, por ejemplo, visible, infrarrojo cercano, infrarrojo medio, etc. Las bandas son herramientas analíticas de la superficie terrestre. Por ejemplo, la imagen de un satélite multiespectral tiene bandas para:\n\nLuz visible (rojo, verde, azul [RGB])\nInfrarrojo cercano (NIR)\nInfrarrojo medio (MIR)\nOtras\n\nEstas bandas se pueden combinar con los colores RGB que proporcionan los monitores para obtener distintas composiciones que resaltan características específicas, como la vegetación o el agua.\n\n\n\n\n\n\n\n\n\nComposición Color Natural\n\n\n\n\n\n\n\n\n\nComposición Falso Color",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#plataformas-y-fuentes-de-datos-satelitales",
    "href": "02-geomatica.html#plataformas-y-fuentes-de-datos-satelitales",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "2.6 Plataformas y fuentes de datos satelitales",
    "text": "2.6 Plataformas y fuentes de datos satelitales\nExisten diversas plataformas y fuentes de datos satelitales que proporcionan imágenes y datos geoespaciales para una amplia variedad de aplicaciones.\n\nTerra - Aqua- MODIS\nMODIS es el Moderate-Resolution Imaging Spectroradiometer abordo de satélites Terra y Aqua de la NASA. Es capaz de capturar 36 bandas espectrales con una resolución espacial desde 250 metros a 1 kilómetro. Es ampliamente ocupado debido a su alta resolución temporal (nivel diario).\nBand | Reflected Range (nm) | Emitted Range (µm) | Band Explanation | Primary Use |\n|:—-:|:——————–:|:————- —–:|——————————–:|:———————————–:| | 1 | 620-670 | | Shortwave/VIS | | | 2 | 841-876 | | Shortwave/NIR | Land/Cloud/Aerosol Properties | | 3 | 459-479 | | Shortwave/VIS | Land/Cloud/Aerosol Properties | | 4 | 545-565 | | Shortwave/VIS | Land/Cloud/Aerosol Properties | | 5 | 1230-1250 | | Shortwave/NIR | Land/Cloud/Aerosol Properties | | 6 | 1628-1652 | | Shortwave Infrared/SWIR | Land/Cloud/Aerosol Properties | | 7 | 2105-2155 | | Shortwave Infrared/SWIR | | | 8 | 405-420 | | Shortwave/VIS | | | 9 | 438-448 | | Shortwave/VIS | | | 10 | 483-493 | | Shortwave/VIS | | | 11 | 526-536 | | Shortwave/VIS | | | 12 | 546-556 | | Shortwave/VIS | | | 13 | 662-672 | | Shortwave/VIS | | | 13h | 662-672 | | Shortwave/VIS | | | 14 | 673-683 | | Shortwave/VIS | | | 14h | 673-683 | | Shortwave/VIS | | | 15 | 743-753 | | Shortwave/VIS | | | 16 | 862-877 | | Shortwave/NIR | | | 17 | 890-920 | | Shortwave/NIR | Atmospheric Water Vapor | | 18 | 931-941 | | Shortwave/NIR | Atmospheric Water Vapor | | 19 | 915-965 | | Shortwave/NIR | Atmospheric Water Vapor | | 20 | | 3.660-3.840 | Longwave thermal Infrared/TIR | | | 21 | | 3.929-3.989 | Longwave thermal Infrared/TIR | | | 22 | | 3.929-3.989 | Longwave thermal Infrared/TIR | | | 23 | | 4.020-4.080 | Longwave thermal Infrared/TIR | | | 24 | | 4.433-4.498 | Longwave thermal Infrared/TIR | Atmospheric Temperature | | 25 | | 4.482-4.549 | Longwave thermal Infrared/TIR | Atmospheric Temperature | | 26 | 1360-1390 | | Shortwave/NIR | | | 27 | | 6.535-6.895 | Longwave thermal Infrared/TIR | | | 28 | | 7.175-7.475 | Longwave thermal Infrared/TIR | | | 29 | | 8.400-8.700 | Longwave thermal Infrared/TIR | Cloud Properties | | 30 | | 9.580-9.880 | Longwave thermal Infrared/TIR | | | 31 | | 10.780-11.280 | Longwave thermal Infrared/TIR | Surface/Cloud Temperature | | 32 | | 11.770-12.270 | Longwave thermal Infrared/TIR | Surface/Cloud Temperature | | 33 | | 13.185-13.485 | Longwave thermal Infrared/TIR | | | 34 | | 13.485-13.785 | Longwave thermal Infrared/TIR | | | 35 | | 13.785-14.085 | Longwave thermal Infrared/TIR | | | 36 | | 14.085-14.385 | Longwave thermal Infrared/TIR | |\n: Bandas de MODIS {#tbl-bandasModis}\n\n\nLandsat\nEl programa Landsat son una seria de misiones satelitáles gestionadas por la NASA y el Servicio Geológico de Estados Unidos (USGS). Desde 1972 han proporcionado imágenes multiespectrales de alta resolción (30 metros) y va continuamente lanzando nuevos satélites. El último ha sido Landsat 9, que fue lanzado el 2021 mejorando la calidad y adquisición de las imágenes de su antecesor (Landsat 8).\n\n\nSentinel\nEs un programa comandado por la Agencia Espacial Europea (ESA), lanzando distintas misiones llamadas Sentinel. Al igual que Landsat, proporciona imágenes de alta resolucion para el monitoreo del Medio Ambiente. El último lanzamiento fue en 2015, el cual consta de dos satélites, Sentinel-2A y Sentinel-2B, capturando 13 bandas y una resolución que varía desde los 10 a 60 metros.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#dentro-de-python",
    "href": "02-geomatica.html#dentro-de-python",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "2.7 Dentro de Python",
    "text": "2.7 Dentro de Python\nEn Python las librerías principales para poder trabajar con datos raster son rasterio y earthpy. rasterio es una librería de Python diseñada para leer y escribir datos raster geoespaciales, mientras que earthpy facilita el manejo de multiples tipos de datos, lidiando con su descarga, descompresión y visualización.\nPor ejemplo, se cargará e imprimirá la información de un raster de elevación (DEM)\n\n\nLa imagen tiene 1 bandas.\nLa imagen tiene EPSG:32613.\n\n\nA través de earthpy podemos visualizarlo:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  },
  {
    "objectID": "02-geomatica.html#ejercicios",
    "href": "02-geomatica.html#ejercicios",
    "title": "2  Fundamentos de Geomática y visualización de Datos Raster",
    "section": "Ejercicios",
    "text": "Ejercicios\n\nCargar DEM de Valdi\nExportar el Sentinel con todas sus bandas\nJugar con la composicion de color",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentos de Geomática y visualización de Datos Raster</span>"
    ]
  }
]