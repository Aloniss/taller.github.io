# Procesamiento de Imágenes Satelitales para el Monitoreo de Incendios {#sec-indices}

Los incendios forestales se han transformado en un grave problema para el mundo y particularmente para los ecosistemas forestales. Dada la actual y futura situación de Cambio Climático, se espera que los incendios aumenten en frecuencia, magnitud y en la extensión de sus temporadas. En este contexto, se hace cada vez más necesario contar con herramientas que permitan su rápida detección y evaluación de los daños una vez ocurridos. 

Aunque las composiciones *RGB* de bandas son útiles para diferenciar las cubiertas y algunas veces sus estados, las transformaciones espectrales pueden ayudar a mejorar las estimaciones de las áreas quemadas y la severidad provocadas por los incendios forestales.

![Bandas del NIR y SWIR para situaciones con y sin incendio.](foo/web/03-01-transEspec.jpg){#fig-03-01}

## Índices de Vegetación de Banda Ancha

Los IVs de banda ancha (los que se aplican a los sensores que poseen bandas espectrales anchas) se encuentran entre las estimaciones más simples de la cantidad y el vigor de la vegetación verde. Son combinaciones de las mediciones de reflectancia que son sensibles a los efectos combinados de la concentración de clorofila del follaje, el área foliar del dosel, la aglomeración del follaje y la arquitectura del dosel.

Los IVs de banda ancha comparan las mediciones de reflectancia desde el pico de reflectancia de la vegetación en el rango del infrarrojo cercano (*NIR*) con otra medición tomada en el rango rojo (R), donde la clorofila absorbe fotones para almacenar energía a través de la fotosíntesis. El uso de mediciones del *NIR*, con una profundidad de penetración mucho mayor a través del dosel que el rojo, permite sondear la cantidad total de vegetación verde en la columna hasta que la señal se satura a niveles muy altos.

![Reflectancia de las longitudes de onda.](foo/web/03-02-ivs.png){#fig-03-02}

Debido a que estas características son espectralmente amplias, muchos de los IVs de banda ancha pueden funcionar de manera efectiva con datos de imágenes recopilados de sensores multiespectrales como *AVHRR*, *TM*, *OLI* y *MSI*, entre otros.

Las aplicaciones incluyen estudios de fenología (crecimiento) de la vegetación, evaluaciones del impacto climatológico y del uso de la tierra, y modelado de la productividad de la vegetación.

Los aumentos en la concentración de clorofila de la hoja o el área de la hoja, la disminución de la aglomeración del follaje y los cambios en la arquitectura del dosel pueden contribuir a la disminución de las longitudes de onda R y al aumento de las longitudes de onda *NIR*, lo que provoca un aumento en los valores de verdor.



### *Normalized Difference Vegetation Index* (*NDVI*) {-}

Este índice es una estimación de la vegetación verde y saludable. La combinación de su formulación de diferencia normalizada y el uso de las regiones de clorofila de mayor absorción y reflectancia lo hacen robusto en una amplia gama de condiciones ([@fig-03-03]). Sin embargo, puede saturarse en condiciones de vegetación densa cuando el LAI aumenta.

El valor de este índice varía de -1 a 1. El rango común para la vegetación verde es de 0,2 a 0,8.
$$
NDVI=\frac{(NIR-RED)}{(NIR+RED)}
$$ {#eq-ndvi}

Donde: 

-   *NIR* corresponde al Infrarrojo Cercano

-   *RED* a la longitud de onda visible para el rojo.

![Ejemplo del cálculo del NDVI para vegetación en distintas condiciones.](foo/web/03-03-ndvi.jpg){#fig-03-03}

### *Normalized Burn Ratio* (*NBR*) {-}

Este índice estima el nivel de daño o severidad del fuego. Esto permite entre otras cosas, dimensionar las zonas afectadas, planificar y monitorear la restauración de los ecosistemas o recursos forestales afectados. La formulación del índice es muy similar al NDVI con la diferencia que usa el *SWIR* (banda sensible al contenido de humedad) en lugar del *Red*.
$$
NBR=\frac{(NIR-SWIR)}{(NIR+SWIR)}
$$ {#eq-nbr}

El *NBR* mostrará un rango de valores que se encuentran entre -1 y 1. En este caso, los valores negativos se asociarán con zonas afectadas por el fuego o suelos descubiertos, mientras que altos valores positivos mostrarán vegetación que no se encuentra afectada por un incendio, o zonas de recuperación de incendios pasados, las áreas no quemadas tendrán valores cercanos a cero.

![Composición *RGB* y *NBR* de un incendio.](foo/web/03-04-nbr.jpg){#fig-03-04}

A pesar que el *NBR* funciona relativamente bien para la estimación de severidad usando imágenes post-incendio, puede presentar confusiones con zonas de baja reflectancia. En este caso, es habitual el uso de índices que incorporen el componente temporal.

### *Difference Normalized Burn Ratio* (*dNBR*) {-}

El *dNBR* funciona con una imagen previa y una posterior al incendio, sobre las cuales se calcula el *NBR* respectivo.

$$
dNBR=(NBR_{pre} - NBR_{post}) \times 1000
$$ {#eq-dnbr}

De esta forma el *dNBR* permite estimar el grado de severidad de una zona, respecto a una condición anterior al incendio. Para generar las diferentes categorías de daño se suelen usar umbrales de corte del índice. Los umbrales indicados a continuación son los empleados por el *US Forest*.

| Nivel de Severidad    | Rango *dNBR* |
|:---------------------:|:------------:|
| Regeneración alta     | -500 a -251  |
| Regeneración baja     | -250 a -101  |
| No quemado            | -100 a 99    |
| Severidad baja        | 100 a 269    |
| Severidad media-baja  | 270 a 439    |
| Severidad media-alta  | 440 a 659    |
| Severidad alta        | 660 a 1300   |

: Categorías de severidad del *dNBR* según el *US Forest* {#tbl-dnbr-severity}

El desempeño de los índices o transformaciones espectrales se ve afectado por las condiciones de la vegetación, que pueden incluir a la heterogeneidad, estructura o cobertura. En otras palabras, no todas las transformaciones espectrales funcionan adecuadamente en todos los ecosistemas. Para el caso del *dNBR*, se ha reportado que subestima el nivel de daño, sobre todo cuando la vegetación pre-incendio corresponde a estructuras heterogéneas o se cuenta con poca cobertura. Para intentar mitigar estos efectos se pueden usar variaciones del *dNBR*.

### *Relative difference Normalized Burn Ratio* (*RdNBR*)

El *RdNBR* utiliza una pequeña modificación para evitar que exista correlación entre las condiciones previas al incendio y el valor de severidad que se estima. De esta manera minimiza los errores de clasificación para las áreas de mayor severidad, mantiene el significado de la severidad y permitiría la comparación de incendios históricos. 
$$
RdNBR=\frac{dNBR}{\sqrt{|\frac{NBR_{pre}}{1000}}|}
$$ {#eq-rdnbr}

### *Relativized Burn Ratio* (*RBR*)

A pesar que el *RdNBR* es una mejora, no está exento de inconvenientes que pueden resultar en valores particularmente altos difíciles de interpretar, valores infinitos o ambiguos. Se propuso entonces el *RBR* como un índice que sea sensible a las condiciones de la vegetación pre incendio, pero que evite además los problemas del *RdNBR*.

$$
RBR=\left(\frac{dNBR}{NBR_{pre}+1.001}\right)
$$

### Burn Area Index (BAI)

Este índice realza las áreas quemadas en la zona del *NIR*, enfatizando la señal del carbón en las imágenes post-incendio. Se calcula como una distancia espectral desde cada pixel a un punto espectral de referencia, donde suelen converger las áreas quemadas recientes.

$$
BAI=\frac{1}{(0.1-Red)^2+(0.06-NIR)^2}
$$

### Ejemplo

En el [Módulo @sec-raster] aprendimos a cargar un raster en Python utilizando *Rasterio*. Es importante recordar que una imagen raster puede ser interpretada como una matriz, la cual *NumPy* puede manejar como un array. En el caso de una imagen monobanda, esta se representará como una matriz de $n$ filas por $n$ columnas. Por otro lado, una imagen multiespectral estará compuesta por múltiples matrices apiladas.

Una vez cargado el raster, se pueden separar sus capas (bandas) y poder realizar las transformaciones espectrales. En el siguiente ejemplo, se cargará una imagen de Valdivia y se le calculará el `NDVI`:

```{python}
#| echo: false
import os 
os.chdir("recursos")
```
```{python}
#| fig-align: center
#| label: lst-trasnform
# Importación de librerías
import os
import rasterio as rio
import earthpy.plot as ep
import numpy as np
import matplotlib.pyplot as plt

# Cargamos la imagen
with rio.open("valdiviaSentinel.tif") as src:
    valdivia = src.read()
    transform = src.transform
    crsValdivia = src.crs

# Seleccion de bandas (el conteo de bandas comienza desde 0)
NIR = valdivia[8,:,:] # Banda 8a (NIR)

Red = valdivia[3,:,:] # Banda 4 (Red)

# NDVI
NDVI = (NIR - Red)/(NIR + Red)

# Visualizacion
f, ax = plt.subplots()
ep.plot_bands(NDVI,
              cmap = "RdYlGn",
              vmin = -1,
              vmax = 1,
              ax = ax)
ax.set_title("NDVI en Valdivia")
plt.show()
```

##  Discretización de datos Raster

Los índices entregan valores continuos en un rango determinado, no obstante, para obtener las categorías de interés, es necesario encontrar ciertos valores o umbrales que permitan esa separación. Generalmente esos umbrales vienen dados o se pueden establecer desde calibraciones en campo o con gráficos de distribución de los valores.

En este caso, se mostrará una segmentación simple del NDVI anteriormente calculado. En este, valores mayores a `0.5` serán una categoría, mientras que valores menores o iguales `0.5` será otra categoría.

```{python}
#| fig-align: center

# Creamos una copia de la variable original
ndvi_clases = NDVI.copy()

# Re-clasifica los valores de los píxeles comparando con el NDVI original
ndvi_clases[np.where((NDVI > 0.5))] = 2
ndvi_clases[np.where((NDVI <= 0.5))] = 1

# Visualizacion
f, ax = plt.subplots()
ep.plot_bands(ndvi_clases,
              cmap="RdYlGn",
              ax = ax)

ax.set_title("NDVI con dos clases")
plt.show()
```

## Vectorización de Datos Raster

Cuando se han obtenido las categorías de interés, muchas veces es necesario transformar los objetos resultantes a formato vectorial para poder utilizarlos en conjunto con bases de datos ya existentes. Para obtener esto, primero deberemos cargar librerías extras. Posteriormente debemos seleccionar que pixeles son los que deseamos vectorizar, y así crear una máscara. Una vez creada la máscara, a través de `shapely` se transformará el raster a un objeto de tipo `generator`.

::: {.callout-note}
Note que en el código del @lst-trasnform se crea la variable `transform`, el cual define cómo convertir entre las coordenadas de píxeles (índices de filas y columnas) y las coordenadas del sistema de referencia espacial del raster (generalmente coordenadas geográficas o proyectadas, como UTM).

Note también que se le extrae el sistema de coordenadas del raster.
:::

Una vez hecho teniendo el objeto de tipo `generator`, se transformará a un *GeoDataFrame* el cual servirá para su visualización:

```{python}
#| fig-align: center

#Importancion de librerias
import shapely # Nos permite transformar geometrías.
import rasterio.features as features # Contiene una función para vectorizar.
import geopandas as gpd

# Asignamos mascara con pixeles de valor 2 (pixeles con mayor a 0.5 de NDVI) 
mask = ndvi_clases == 2

# Convertirmos a objeto tipo generador
result = features.shapes(ndvi_clases, 
                transform = transform, 
                connectivity = 4, 
                mask = mask)

# Convertimos result a geoDataFrame a través de un loop
lista = []

# Bucle que toma cada geometría y la agrega a la lista.
for x in result: 
    lista.append(shapely.geometry.shape(x[0]))

lista_geo = gpd.GeoDataFrame(geometry = lista,
                             crs = crsValdivia)

# Visualizacion
f, ax = plt.subplots()
lista_geo.plot(ax = ax,
               color = "green")
ax.set_title("NDVI vectorial en Valdivia")
plt.show()
```

## Exportación de archivos

Una vez creados los archivos de interés (ya sea raster o vectorial), podemos exportarlos de la siguiente manera:

Para datos raster:

```{python}
#| eval: false

# Para raster con el NDVI calculado =========

with rio.open("ndviValdivia.tif", # Crea el archivo
              'w', # En modo escritura (write)
              driver = 'GTiff',  # Especifica el controlador (formato) del archivo, en este caso GeoTIFF
              height = NDVI.shape[0], # Alto de raster
              width = NDVI.shape[1], # Ancho de raster
              count = 1, # Número de bandas en el raster 
              crs = crs, # Sistema de referencia de coordenadas (CRS) del raster
              transform = transform, # Transformación de afinidad del raster
              dtype = "float32") as dst: # Tipo de dato de los valores del raster
    dst.write(NDVI, 1)

# Para el raster con las clases del NDVI =========
with rio.open("ndvi_clases.tif", # Crea el archivo
              'w', # En modo escritura (write)
              driver = 'GTiff',  # Especifica el controlador (formato) del archivo, en este caso GeoTIFF
              height = ndvi_clases.shape[0], # Alto de raster
              width = ndvi_clases.shape[1], # Ancho de raster
              count = 1, # Número de bandas en el raster 
              crs = crs, # Sistema de referencia de coordenadas (CRS) del raster
              transform = transform, # Transformación de afinidad del raster
              dtype = "float32") as dst: # Tipo de dato de los valores del raster
    dst.write(ndvi_clases, 1)
```

Para datos vectoriales:

```{python}
#| eval: false
lista_geo.to_file("ndvi_vectrorial.shp")
```

## Ejercicios {-}

1.  Descargue el siguiente [set de datos](https://figshare.com/ndownloader/files/50344533). Ests son dos imágenes de Santa Cruz antes y después de los incendios ocurridos en el año 2017. Las bandas entregadas son: B1, B2, B3, B4, B5, B6, B7, B8A, B11, B12.

2.  A través de *Rasterio* y *NumPy* calcule *NDVI* y *BAI* para la imagen post-incendio.

3.  Calcule el *NBR* y los derivados de este índice para ambas imágenes.

4.  A través de la @tbl-dnbr-severity, discretice el raster de *dNBR* y exportelo como un archivo `.tif`.

5.  Vectorice el raster discretizado y exportelo como archivo `.shp`.


